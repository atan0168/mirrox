name: Backend CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/digital-twin-backend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for compose file)
        uses: actions/checkout@v4

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: 'true'

      - name: Create env file from secret
        run: |
          mkdir -p .deploy
          # Write the raw .env content from a single secret
          printf "%s" "${{ secrets.BACKEND_ENV }}" > .deploy/backend.env

      - name: Prepare image ref
        id: prep
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/digital-twin-backend:${{ github.sha }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Ensure target directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            mkdir -p ~/digital-twin/backend

      - name: Upload compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: 'docker-compose.prod.yml'
          target: '~/digital-twin'

      - name: Upload backend env file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: '.deploy/backend.env'
          target: '~/digital-twin'

      - name: Deploy (pull and up)
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE: ${{ steps.prep.outputs.image }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -euo pipefail
            cd ~/digital-twin
            # Ensure docker and compose are installed on the VPS
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker is required on the server" >&2
              exit 1
            fi
            # Login to GHCR using a PAT with read:packages scope
            echo "Logging in to GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin
            echo "Pulling $IMAGE ..."
            docker pull "$IMAGE"
            # Expect a server-side env file at ./backend/.env
            mkdir -p backend
            mv -f backend.env backend/.env
            # Launch/refresh via compose (IMAGE env var is used by compose file)
            IMAGE="$IMAGE" docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -f
