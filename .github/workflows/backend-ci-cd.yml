name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
      - 'docker-compose.prod.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/digital-twin-backend
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=long,prefix=

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    environment: production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for compose file)
        uses: actions/checkout@v4

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: 'true'

      - name: Create env file from secret
        run: |
          mkdir -p .deploy
          # Write the raw .env content from a single secret
          printf "%s" "${{ secrets.BACKEND_ENV }}" > .deploy/backend.env

      - name: Prepare image ref
        id: prep
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/digital-twin-backend:${{ github.sha }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Ensure target directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            mkdir -p ~/digital-twin/backend

      - name: Set up SSH ðŸ”‘
        run: |
          set -e
          mkdir -p -m 700 "$HOME/.ssh"
          PORT="${{ secrets.VPS_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          ssh-keyscan -H -p "$PORT" "${{ secrets.VPS_HOST }}" >> "$HOME/.ssh/known_hosts"
          # preserve newlines and strip any CRs that break PEM parsing
          echo "${{ secrets.VPS_SSH_KEY }}" | tr -d '\r' > "$HOME/.ssh/id_rsa"
          chmod 400 "$HOME/.ssh/id_rsa"

      - name: Upload compose file
        run: |
          PORT="${{ secrets.VPS_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          scp -P "$PORT" -o StrictHostKeyChecking=yes \
            docker-compose.prod.yml \
            "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/digital-twin/"

      - name: Upload backend env file (direct)
        run: |
          PORT="${{ secrets.VPS_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          scp -P "$PORT" -o StrictHostKeyChecking=yes \
            .deploy/backend.env \
            "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/digital-twin/backend/.env"

      - name: Deploy (pull and up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -euo pipefail
            cd ~/digital-twin
            # Ensure docker and compose are installed on the VPS
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker is required on the server" >&2
              exit 1
            fi
            # Login to GHCR using a PAT with read:packages scope
            echo "Logging in to GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

            IMAGE_TO_PULL="${{ steps.prep.outputs.image }}"
            echo "IMAGE=${{ steps.prep.outputs.image }}" > .env

            echo "Pulling $IMAGE_TO_PULL ..."
            docker pull "$IMAGE_TO_PULL"
            if [ ! -f "backend/.env" ]; then
              echo "Required env file backend/.env is missing. Did the upload step run?" >&2
              exit 1
            fi
            # Launch/refresh via compose (IMAGE env var is used by compose file)
            IMAGE="$IMAGE_TO_PULL" docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -f
